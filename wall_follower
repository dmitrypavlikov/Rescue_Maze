#!/usr/bin/env python
import rospy
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from time import sleep

ranges = []
spd = Twist() #linear.x and angular.z
left_hand = 0
nose = 0
error = 0



def reading_scan(msg):
	ranges.clear()
	for i in range(0, 360):
		if msg.ranges[i] != float("inf"):
			ranges.append(round(msg.ranges[i]*1000))
		else: ranges.append(-1)
		
def print_info():
	return
	
		
def main():
	rospy.init_node('turtle_control')
	sub_scan = rospy.Subscriber('/scan', LaserScan, callback = reading_scan)
	pub_move = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
	rate = rospy.Rate(10)
	while len(ranges) == 0:
		print("Array is empty!")
	while not rospy.is_shutdown():
		"""if len(ranges) == 0:
			print("Array is empty, check GAZEBO!")"""
		
##############  workspace  #####################		

		left_hand = round((ranges[90] + ranges[92] + ranges[88])/3)
		nose = round((ranges[0] + ranges[358] + ranges[2])/3)
		#print(left_hand)
		
		error =((500 - left_hand)/650)
		if 0 <= nose <= 500:
			error += 1
		spd.linear.x = 0.2 #((25+error) + (25-error))*0.03
		spd.angular.z = error #((25+error) - (25-error))*0.16
		
		rospy.loginfo(f"left= {left_hand} | nose = {nose} | angular_spd = {spd.angular.z}")

		pub_move.publish(spd) #print_info()
		#rate.sleep()
		


if __name__ == '__main__':
	main()
	
	
